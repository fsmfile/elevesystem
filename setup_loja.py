r"""Eleve System ‚Äì Instalador com ID remoto e modo Dev (GitHub API)
------------------------------------------------------
Compile:
    pyinstaller --onefile --noconsole --icon=ico/setup.ico installer_elevesystem.py

Recursos:
‚Ä¢ Usu√°rio digita o SERIAL (nome do arquivo JSON)
‚Ä¢ O instalador baixa as configura√ß√µes a partir do JSON
‚Ä¢ O valor salvo no backend √© o "CLIENT_ID" de dentro do JSON
‚Ä¢ Controle de serial √∫nico - cada serial s√≥ pode ser usado uma vez
‚Ä¢ Modo Dev ativado com Ctrl+Shift+C e senha 4865753:
    - Permite criar novo JSON com formul√°rio (Serial + campos de configura√ß√£o)
    - Salva automaticamente em https://github.com/fsmfile/elevesystem/configs/
‚Ä¢ Sistema inteligente de atualiza√ß√£o:
    - Verifica se j√° existe licen√ßa v√°lida no backend
    - Se houver: mostra bot√£o "Atualizar Sistema" (atualiza apenas frontend + atalho)
    - Se n√£o houver: mostra bot√£o "Baixar Configura√ß√£o e Instalar" (instala√ß√£o completa)
"""

import os, sys, json, base64, datetime as dt, urllib.request, shutil
import pyodbc
from pathlib import Path
from uuid import uuid4
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from ttkbootstrap import Style
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
if not GITHUB_TOKEN:
    raise ValueError("GITHUB_TOKEN n√£o encontrado! Verifique se o arquivo .env existe e cont√©m o token.")
GITHUB_USER = "fsmfile"
GITHUB_REPO = "elevesystem"
GITHUB_BRANCH = "main"
CONFIG_URL_BASE = f"https://raw.githubusercontent.com/{GITHUB_USER}/{GITHUB_REPO}/{GITHUB_BRANCH}/configs/"

# URL do Google Sheets para verifica√ß√£o de seriais
GOOGLE_SHEETS_URL = "https://docs.google.com/spreadsheets/d/1krk27oPgtAsVHs3mmEBnlmXOk1O0Bws1UA4i2s65DfI/export?format=csv&gid=0"

ICON_PATH = Path(__file__).parent / "ico" / "setup.ico"

def verificar_serial_usado(serial: str) -> bool:
    """Verifica se o serial j√° foi utilizado consultando o Google Sheets"""
    serial = serial.strip().upper()
    
    try:
        print("üîç Verificando serial na planilha...")
        
        # Acessa a planilha do Google Sheets
        with urllib.request.urlopen(GOOGLE_SHEETS_URL) as resp:
            if resp.status != 200:
                raise Exception(f"Erro ao acessar planilha: HTTP {resp.status}")
            
            # L√™ o conte√∫do CSV
            conteudo = resp.read().decode('utf-8')
            linhas = conteudo.strip().split('\n')
            
            # Processa cada linha da planilha
            for i, linha in enumerate(linhas):
                if i == 0:  # Pula cabe√ßalho
                    continue
                    
                # Divide a linha em colunas (CSV)
                colunas = linha.split(',')
                if len(colunas) >= 3:  # ClienteID, DataExpira, Serial_Utilizado
                    cliente_id = colunas[0].strip().strip('"').upper()
                    serial_utilizado = colunas[2].strip().strip('"').upper()
                    
                    # Verifica se √© o serial procurado
                    if cliente_id == serial:
                        print(f"‚úÖ Serial encontrado na planilha")
                        print(f"   Cliente: {cliente_id}")
                        print(f"   Status: {serial_utilizado}")
                        
                        # Verifica se j√° foi utilizado
                        if serial_utilizado == "SIM":
                            print("‚ùå Serial j√° est√° UTILIZADO")
                            return True  # Serial j√° foi usado
                        else:
                            print("‚úÖ Serial ainda DISPON√çVEL")
                            return False  # Serial dispon√≠vel
            
            # Serial n√£o encontrado na planilha
            print(f"‚ùå Serial {serial} n√£o encontrado na planilha!")
            raise Exception(f"Serial {serial} n√£o est√° cadastrado no sistema de controle.")
            
    except urllib.error.HTTPError as e:
        if e.code == 404:
            raise Exception("Sistema de controle n√£o encontrado. Verifique a configura√ß√£o.")
        else:
            raise Exception(f"Erro ao acessar sistema de controle: HTTP {e.code}")
    except urllib.error.URLError as e:
        raise Exception("Falha de conex√£o. Verifique sua internet e tente novamente.")
    except Exception as e:
        if "n√£o est√° cadastrado" in str(e):
            raise  # Re-propaga erro espec√≠fico
        else:
            raise Exception(f"Erro ao verificar serial no sistema: {e}")

def marcar_serial_como_usado(serial: str):
    """Marca o serial como usado ATUALIZANDO A PLANILHA do Google Sheets"""
    serial = serial.strip().upper()
    
    print("üîÑ Marcando serial como usado no sistema...")
    
    # NOTA: Por limita√ß√µes da API do Google Sheets sem autentica√ß√£o OAuth2,
    # n√£o √© poss√≠vel alterar a planilha diretamente via URL.
    # A marca√ß√£o deve ser feita MANUALMENTE na planilha ou via script separado.
    
    print("‚ö†Ô∏è IMPORTANTE:")
    print(f"   O serial {serial} foi instalado com sucesso!")
    print("   Para marcar como usado no sistema:")
    print("   1. Acesse o painel administrativo")
    print(f"   2. Encontre a linha do cliente {serial}")
    print("   3. Altere a coluna 'Serial_Utilizado' de 'N√£o' para 'Sim'")
    print("   4. Salve as altera√ß√µes")
    print()
    print("   OU use o script: python marcar_serial_planilha.py SERIAL")

def baixar_config_por_serial(serial: str) -> dict:
    serial = serial.strip().upper()  # Garante mai√∫sculo e sem espa√ßos
    url = f"{CONFIG_URL_BASE}{serial}.json"
    try:
        with urllib.request.urlopen(url) as resp:
            if resp.status != 200:
                raise Exception(f"Erro ao acessar o arquivo: {resp.status}")
            return json.load(resp)
    except urllib.error.HTTPError as e:
        raise Exception(f"SERIAL n√£o encontrado (HTTP {e.code})\nURL: {url}")
    except urllib.error.URLError as e:
        raise Exception("Falha de conex√£o. Verifique sua internet.")
    except Exception as e:
        raise Exception(f"Erro inesperado: {e}")

def add_trusted_location(path: Path):
    import winreg as reg
    for ver in ("16.0", "15.0", "14.0"):
        key = fr"Software\\Microsoft\\Office\\{ver}\\Access\\Security\\Trusted Locations\\EleveSystem"
        try:
            with reg.CreateKey(reg.HKEY_CURRENT_USER, key) as k:
                reg.SetValueEx(k, "Path", 0, reg.REG_SZ, str(path) + "\\")
                reg.SetValueEx(k, "AllowSubfolders", 0, reg.REG_DWORD, 1)
        except:
            pass

def download_with_progress(url: str, dest: Path, label: tk.Label, force: bool = False):
    if not url or (dest.exists() and not force): return
    with urllib.request.urlopen(url) as resp:
        total = int(resp.getheader('Content-Length') or 0)
        downloaded = 0
        with open(dest, 'wb') as f:
            while True:
                chunk = resp.read(8192)
                if not chunk: break
                f.write(chunk)
                downloaded += len(chunk)
                if total:
                    pct = int(downloaded * 100 / total)
                    label.config(text=f"Baixando {dest.name}: {pct}%")

def connect_access(db_path: Path, senha: str):
    conn_str = f"Driver={{Microsoft Access Driver (*.mdb, *.accdb)}};DBQ={db_path};Uid=Admin;Pwd={senha};"
    return pyodbc.connect(conn_str, autocommit=True)

def garantir_tabela_licenca(conn):
    """Garante que a tabela de licen√ßa existe com todos os campos necess√°rios"""
    cur = conn.cursor()
    try:
        # Verifica se a tabela existe
        cur.execute("SELECT TOP 1 * FROM tblLicencaLocal")
        print("‚úÖ Tabela tblLicencaLocal j√° existe")
        
        # Verifica se os novos campos existem
        campos_necessarios = [
            ('DataInicioCarencia', 'DATETIME'),
            ('DiasCarenciaUtilizados', 'INTEGER'),
            ('LicencaValida', 'BIT')
        ]
        
        for campo, tipo in campos_necessarios:
            try:
                cur.execute(f"SELECT {campo} FROM tblLicencaLocal")
                print(f"‚úÖ Campo {campo} j√° existe")
            except:
                # Adiciona campo se n√£o existir
                cur.execute(f"ALTER TABLE tblLicencaLocal ADD COLUMN {campo} {tipo}")
                print(f"‚úÖ Campo {campo} adicionado")
                
    except:
        # Cria tabela completa se n√£o existir
        print("üîß Criando tabela tblLicencaLocal...")
        cur.execute("""
            CREATE TABLE tblLicencaLocal (
                ClienteID TEXT(100),
                HardwareID TEXT(100),
                UltimaDataOk DATETIME,
                DataInicioCarencia DATETIME,
                DiasCarenciaUtilizados INTEGER,
                LicencaValida BIT
            )
        """)
        print("‚úÖ Tabela tblLicencaLocal criada com sucesso")
    
    # N√ÉO insere registro padr√£o - deixa vazia para o gravar_licenca configurar
    
    conn.commit()
    cur.close()

def gravar_licenca(conn, client_id: str, dias: int, forcar: bool = False):
    """Grava ou atualiza a licen√ßa do cliente no backend"""
    cur = conn.cursor()
    
    # Obt√©m hardware ID
    try:
        import subprocess
        result = subprocess.run(['wmic', 'csproduct', 'get', 'uuid'], 
                              capture_output=True, text=True, shell=True)
        lines = result.stdout.strip().split('\n')
        if len(lines) >= 2:
            hardware_id = lines[1].strip()
        else:
            hardware_id = f"HW_{dt.datetime.now().strftime('%Y%m%d%H%M%S')}"
    except:
        hardware_id = f"HW_{dt.datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    # Verifica se j√° existe registro
    cur.execute("SELECT COUNT(*) FROM tblLicencaLocal")
    ja_tem = cur.fetchone()[0] > 0
    
    if not ja_tem or forcar:
        # Remove registros existentes se for√ßar
        if forcar:
            cur.execute("DELETE FROM tblLicencaLocal")
        
        # Insere novo registro com todos os campos
        cur.execute("""
            INSERT INTO tblLicencaLocal 
            (ClienteID, HardwareID, UltimaDataOk, DataInicioCarencia, DiasCarenciaUtilizados, LicencaValida)
            VALUES (?, ?, ?, NULL, 0, True)
        """, (client_id, hardware_id, dt.datetime.now()))
        
        print(f"‚úÖ Licen√ßa gravada para cliente: {client_id}")
        print(f"   Hardware ID: {hardware_id}")
    else:
        # Atualiza registro existente
        cur.execute("""
            UPDATE tblLicencaLocal 
            SET ClienteID = ?, HardwareID = ?, UltimaDataOk = ?, LicencaValida = True
            WHERE ClienteID IS NOT NULL
        """, (client_id, hardware_id, dt.datetime.now()))
        
        print(f"‚úÖ Licen√ßa atualizada para cliente: {client_id}")
    
    conn.commit()
    cur.close()

def criar_atalho(frontend_path: Path, nome_atalho: str):
    try:
        import win32com.client
        
        # Tenta diferentes locais para o desktop
        desktop_locations = [
            Path(os.path.join(os.environ['USERPROFILE'], 'Desktop')),
            Path(os.path.join(os.environ['PUBLIC'], 'Desktop')),
            Path("C:\\Users\\Public\\Desktop")
        ]
        
        desktop = None
        for loc in desktop_locations:
            if loc.exists() and loc.is_dir():
                desktop = loc
                break
        
        if not desktop:
            print("‚ö†Ô∏è Desktop n√£o encontrado. Atalho n√£o ser√° criado.")
            return
        
        atalho = desktop / nome_atalho
        
        # Verifica se j√° existe e remove se necess√°rio
        if atalho.exists():
            try:
                atalho.unlink()
            except:
                pass
        
        # Tenta criar o atalho
        shell = win32com.client.Dispatch('WScript.Shell')
        lnk = shell.CreateShortCut(str(atalho))
        lnk.Targetpath = str(frontend_path)
        lnk.WorkingDirectory = str(frontend_path.parent)
        lnk.Description = "Eleve System - Sistema de Gest√£o Empresarial"

        # Extrai o √≠cone mesmo empacotado no .exe
        if getattr(sys, 'frozen', False):
            base_path = Path(sys._MEIPASS)
        else:
            base_path = Path(__file__).parent
        icone_final = base_path / "ico" / "setup.ico"

        if icone_final.exists():
            lnk.IconLocation = f"{str(icone_final)},0"

        lnk.save()
        print(f"‚úÖ Atalho criado em: {atalho}")
        
    except PermissionError:
        print("‚ö†Ô∏è Sem permiss√£o para criar atalho no desktop.")
        print("   O sistema foi instalado, mas voc√™ precisar√° criar o atalho manualmente.")
        print(f"   Caminho do execut√°vel: {frontend_path}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao criar atalho: {e}")
        print(f"   O sistema foi instalado em: {frontend_path}")
        print("   Voc√™ pode criar o atalho manualmente ou executar diretamente.")


def upload_json_para_github(filename: str, data: dict):
    if not GITHUB_TOKEN:
        # Salva localmente na pasta configs como alternativa
        configs_dir = Path(__file__).parent / "configs"
        configs_dir.mkdir(exist_ok=True)
        
        local_file = configs_dir / filename
        with open(local_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        raise Exception(f"Token do GitHub n√£o encontrado.\n\n"
                       f"O arquivo {filename} foi salvo localmente em:\n{local_file}\n\n"
                       f"Para salvar diretamente no GitHub:\n"
                       f"1. Configure a vari√°vel de ambiente 'GITHUB_TOKEN'\n"
                       f"2. Ou mova manualmente o arquivo para o reposit√≥rio")

    url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/contents/configs/{filename}"
    conteudo = json.dumps(data, indent=2, ensure_ascii=False)
    payload = json.dumps({
        "message": f"Cadastro autom√°tico de cliente {filename}",
        "content": base64.b64encode(conteudo.encode()).decode(),
        "branch": GITHUB_BRANCH
    })
    req = urllib.request.Request(url, data=payload.encode(), method="PUT")
    req.add_header("Authorization", f"token {GITHUB_TOKEN}")
    req.add_header("Content-Type", "application/json")
    req.add_header("User-Agent", "EleveSystem-Installer/1.0")
    try:
        with urllib.request.urlopen(req) as resp:
            if resp.status not in (200, 201):
                raise Exception(f"Erro ao salvar no GitHub: {resp.status}")
    except urllib.error.HTTPError as e:
        raise Exception(f"Erro ao salvar no GitHub (HTTP {e.code}): {e.reason}")
    except urllib.error.URLError as e:
        raise Exception("Falha de conex√£o ao tentar salvar no GitHub.")
    except Exception as e:
        raise Exception(f"Erro inesperado ao salvar JSON: {e}")


def abrir_modo_dev(root):
    dev_win = tk.Toplevel(root)
    dev_win.title("Painel do Desenvolvedor - Eleve System")
    dev_win.geometry("700x600")
    if ICON_PATH.exists():
        try: dev_win.iconbitmap(str(ICON_PATH))
        except: pass

    # Notebook para abas
    notebook = ttk.Notebook(dev_win)
    notebook.pack(fill='both', expand=True, padx=10, pady=10)
    
    # ABA 1: Informa√ß√µes do Sistema
    frame_info = ttk.Frame(notebook)
    notebook.add(frame_info, text="üìä Informa√ß√µes do Sistema")
    
    # Informa√ß√µes t√©cnicas detalhadas
    info_text = tk.Text(frame_info, wrap='word', font=('Consolas', 9))
    info_scroll = ttk.Scrollbar(frame_info, orient='vertical', command=info_text.yview)
    info_text.configure(yscrollcommand=info_scroll.set)
    info_text.pack(side='left', fill='both', expand=True)
    info_scroll.pack(side='right', fill='y')
    
    # Coleta informa√ß√µes t√©cnicas
    info_licenca = verificar_licenca_existente()
    info_sistema = []
    
    info_sistema.append("=== INFORMA√á√ïES T√âCNICAS DO SISTEMA ===\n")
    info_sistema.append(f"üïí Data/Hora: {dt.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    info_sistema.append(f"üíª Sistema Operacional: {os.name}")
    info_sistema.append(f"üêç Python: {sys.version}")
    info_sistema.append(f"üìÅ Diret√≥rio do Instalador: {Path(__file__).parent}")
    info_sistema.append(f"üåê Token GitHub Configurado: {'Sim' if GITHUB_TOKEN else 'N√£o'}")
    info_sistema.append(f"üîó Reposit√≥rio: {GITHUB_USER}/{GITHUB_REPO}")
    info_sistema.append(f"üåø Branch: {GITHUB_BRANCH}")
    
    info_sistema.append("\n=== STATUS DA INSTALA√á√ÉO ===")
    if info_licenca["tem_licenca"]:
        info_sistema.append(f"‚úÖ Status: Sistema INSTALADO")
        info_sistema.append(f"üë§ Cliente ID: {info_licenca['cliente_id']}")
        info_sistema.append(f"üíæ Backend: {info_licenca['caminho_backend']}")
        info_sistema.append(f"üñ•Ô∏è Frontend: {info_licenca['caminho_frontend']}")
        
        # Verifica atalho
        atalho_existe = verificar_atalho_existe()
        info_sistema.append(f"üîó Atalho no Desktop: {'Sim' if atalho_existe else 'N√£o'}")
        
        # Informa√ß√µes detalhadas da licen√ßa
        try:
            backend_path = Path(info_licenca['caminho_backend'])
            if backend_path.exists():
                info_sistema.append(f"üìä Tamanho Backend: {backend_path.stat().st_size / 1024 / 1024:.2f} MB")
                info_sistema.append(f"üìÖ Modificado em: {dt.datetime.fromtimestamp(backend_path.stat().st_mtime).strftime('%d/%m/%Y %H:%M:%S')}")
        except:
            pass
            
    else:
        info_sistema.append(f"‚ùå Status: Sistema N√ÉO INSTALADO")
        info_sistema.append(f"üìù Motivo: {info_licenca.get('erro', 'N√£o especificado')}")
    
    info_sistema.append("\n=== CONFIGURA√á√ïES T√âCNICAS ===")
    info_sistema.append(f"üìÇ Diret√≥rio Padr√£o: C:\\FLMSistemas")
    info_sistema.append(f"üóÑÔ∏è Nome Backend: FLMSistemas_be.accdb")
    info_sistema.append(f"üñ•Ô∏è Nome Frontend: FLMSistemas_automacao.accdr")
    info_sistema.append(f"üìã √çcone: {ICON_PATH}")
    
    # Informa√ß√µes de conectividade
    info_sistema.append("\n=== CONECTIVIDADE ===")
    try:
        import urllib.request
        with urllib.request.urlopen("https://www.google.com", timeout=5) as response:
            info_sistema.append("üåê Internet: Conectado")
    except:
        info_sistema.append("üåê Internet: Desconectado")
    
    try:
        with urllib.request.urlopen(f"{CONFIG_URL_BASE}TESTE.json", timeout=5) as response:
            info_sistema.append("‚òÅÔ∏è GitHub: Acess√≠vel")
    except:
        info_sistema.append("‚òÅÔ∏è GitHub: Inacess√≠vel")
    
    info_text.insert('1.0', '\n'.join(info_sistema))
    info_text.config(state='disabled')
    
    # ABA 2: Cadastrar Cliente
    frame_cadastro = ttk.Frame(notebook)
    notebook.add(frame_cadastro, text="‚ûï Cadastrar Cliente")

    serial_frame = ttk.Frame(frame_cadastro)
    serial_frame.pack(pady=(10, 0))
    ttk.Label(serial_frame, text="SERIAL (nome do arquivo JSON)").pack(anchor='w')
    serial_entry = ttk.Entry(serial_frame, width=50)
    serial_entry.pack(ipady=2)

    campos = {
        "CLIENT_ID": "NOVOCLIENTE",
        "INSTALL_DIR": "C:\\FLMSistemas",
        "BACKEND_NAME": "FLMSistemas_be.accdb",
        "FRONTEND_NAME": "FLMSistemas_automacao.accdr",
        "BACKEND_URL": "https://seuservidor.com/FLMSistemas_be.accdb",
        "FRONTEND_URL": "https://github.com/fsmfile/elevesystem/raw/main/FrontEnd/FLMSistemas_automacao.accdr",
        "DB_PASSWORD": "Ca486575@",
        "CAR√äNCIA_DIAS": "10",
        "SHORTCUT_NAME": "Eleve System.lnk"
    }

    frame_campos = ttk.Frame(frame_cadastro, padding=10)
    frame_campos.pack(fill='both', expand=True)
    entradas = {}
    for i, (chave, val) in enumerate(campos.items()):
        ttk.Label(frame_campos, text=chave).grid(row=i, column=0, sticky='e', padx=6, pady=5)
        ent = ttk.Entry(frame_campos, width=45)
        ent.insert(0, val)
        ent.grid(row=i, column=1, pady=5)
        entradas[chave] = ent

    def salvar():
        serial = serial_entry.get().strip()
        dados = {k: v.get().strip() for k, v in entradas.items()}
        if not serial or not dados['CLIENT_ID']:
            messagebox.showerror("Erro", "Preencha o SERIAL e o CLIENT_ID.")
            return
        try:
            upload_json_para_github(f"{serial}.json", dados)
            messagebox.showinfo("Sucesso", f"Arquivo {serial}.json salvo no GitHub!")
            dev_win.destroy()
        except Exception as e:
            error_msg = str(e)
            if "Token do GitHub n√£o encontrado" in error_msg:
                # Se √© o erro de token mas o arquivo foi salvo localmente
                if "foi salvo localmente" in error_msg:
                    resposta = messagebox.askyesno(
                        "Arquivo Salvo Localmente", 
                        f"{error_msg}\n\nDeseja fechar a janela mesmo assim?",
                        icon='warning'
                    )
                    if resposta:
                        dev_win.destroy()
                else:
                    messagebox.showerror("Erro", error_msg)
            else:
                messagebox.showerror("Erro", error_msg)

    ttk.Button(frame_cadastro, text="üíæ Salvar no GitHub", command=salvar).pack(pady=15)


def instalar(config: dict, label: tk.Label, btn: ttk.Button, serial: str):
    try:
        btn.config(state='disabled')
        pasta = Path(config['INSTALL_DIR'])
        pasta.mkdir(parents=True, exist_ok=True)
        be = pasta / config['BACKEND_NAME']
        fe = pasta / config['FRONTEND_NAME']

        progresso = []

        if not be.exists():
            download_with_progress(config['BACKEND_URL'], be, label)
            progresso.append("‚úî Backend instalado")
        else:
            progresso.append("‚úî Backend j√° presente")

        # Frontend sempre substitui (for√ßa atualiza√ß√£o)
        if fe.exists():
            progresso.append("üîÑ Substituindo frontend existente...")
            label.config(text="\n".join(progresso))
            label.update()
        download_with_progress(config['FRONTEND_URL'], fe, label, force=True)
        progresso.append("‚úî Frontend instalado/atualizado")

        add_trusted_location(pasta)
        progresso.append("‚úî Local confi√°vel configurado")
        
        # Configura√ß√£o do sistema de licen√ßa
        label.config(fg='blue', text="\n".join(progresso + ["üîß Configurando sistema de licen√ßa..."]))
        label.update()
        
        conn = connect_access(be, config['DB_PASSWORD'])
        garantir_tabela_licenca(conn)
        progresso.append("‚úî Tabela de licen√ßa configurada")

        # Verifica cliente atual
        cur = conn.cursor()
        cur.execute("SELECT ClienteID FROM tblLicencaLocal")
        linha = cur.fetchone()
        cur.close()

        cliente_instalado = linha[0] if linha else None

        if cliente_instalado and cliente_instalado != config['CLIENT_ID']:
            label.config(fg='red', text=f"‚ùå Este instalador √© para '{config['CLIENT_ID']}', mas o sistema j√° est√° ativado como '{cliente_instalado}'.\n\nEntre em contato com o suporte para reconfigura√ß√£o.")
            return

        # Grava licen√ßa do cliente
        gravar_licenca(conn, config['CLIENT_ID'], int(config['CAR√äNCIA_DIAS']), forcar=False)
        progresso.append(f"‚úî Licen√ßa configurada para: {config['CLIENT_ID']}")
        conn.close()
        
        # Tenta criar atalho, mas n√£o falha se der erro
        try:
            criar_atalho(fe, config['SHORTCUT_NAME'])
            progresso.append("‚úî Atalho criado")
        except:
            progresso.append("‚ö†Ô∏è Atalho n√£o criado (sem permiss√£o)")
            progresso.append(f"   Execute: {fe}")

        # Marca o serial como usado ap√≥s instala√ß√£o bem-sucedida
        try:
            progresso.append("üîí Marcando serial como usado...")
            label.config(text="\n".join(progresso))
            label.update()
            marcar_serial_como_usado(serial)
            progresso.append("‚úî Serial marcado como usado")
        except Exception as e:
            # N√£o falha a instala√ß√£o se n√£o conseguir marcar o serial
            progresso.append(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel marcar o serial como usado: {e}")

        label.config(fg='green', text="\n".join(progresso + ["‚úÖ Instala√ß√£o conclu√≠da com sucesso!"]))

    except Exception as e:
        label.config(fg='red', text=f"‚ùå Erro: {e}")
    finally:
        btn.config(state='normal')

def verificar_licenca_existente(install_dir: str = "C:\\FLMSistemas", backend_name: str = "FLMSistemas_be.accdb", password: str = "Ca486575@") -> dict:
    """Verifica se existe licen√ßa v√°lida no backend e retorna informa√ß√µes"""
    resultado = {
        "tem_licenca": False,
        "cliente_id": None,
        "caminho_backend": None,
        "caminho_frontend": None,
        "erro": None
    }
    
    try:
        # Verifica se o diret√≥rio existe
        pasta = Path(install_dir)
        if not pasta.exists():
            resultado["erro"] = "Diret√≥rio de instala√ß√£o n√£o encontrado"
            return resultado
        
        # Verifica se o backend existe
        backend_path = pasta / backend_name
        if not backend_path.exists():
            resultado["erro"] = "Backend n√£o encontrado"
            return resultado
        
        resultado["caminho_backend"] = str(backend_path)
        resultado["caminho_frontend"] = str(pasta / "FLMSistemas_automacao.accdr")
        
        # Tenta conectar ao backend
        try:
            conn = connect_access(backend_path, password)
        except Exception as e:
            resultado["erro"] = f"Erro ao conectar backend: {str(e)}"
            return resultado
        
        # Verifica se a tabela de licen√ßa existe e tem dados
        cur = conn.cursor()
        try:
            cur.execute("SELECT ClienteID, LicencaValida FROM tblLicencaLocal")
            rows = cur.fetchall()
            
            if rows:
                for row in rows:
                    cliente_id = row[0]
                    licenca_valida = row[1] if len(row) > 1 else True
                    
                    if cliente_id and str(cliente_id).strip() and cliente_id.upper() != "DESCONHECIDO":
                        resultado["tem_licenca"] = True
                        resultado["cliente_id"] = cliente_id
                        break
            
        except Exception as e:
            # Tabela n√£o existe ou erro ao acessar
            resultado["erro"] = "Tabela de licen√ßa n√£o encontrada ou inacess√≠vel"
        finally:
            cur.close()
            conn.close()
        
        return resultado
        
    except Exception as e:
        resultado["erro"] = f"Erro geral: {str(e)}"
        return resultado

def verificar_atalho_existe(nome_atalho: str = "Eleve System.lnk") -> bool:
    """Verifica se o atalho j√° existe no desktop"""
    try:
        desktop_locations = [
            Path(os.path.join(os.environ['USERPROFILE'], 'Desktop')),
            Path(os.path.join(os.environ['PUBLIC'], 'Desktop')),
            Path("C:\\Users\\Public\\Desktop")
        ]
        
        for desktop in desktop_locations:
            if desktop.exists():
                atalho = desktop / nome_atalho
                if atalho.exists():
                    return True
        
        return False
    except:
        return False

def atualizar_sistema_sem_serial(label: tk.Label, btn: ttk.Button, info_licenca: dict):
    """Atualiza o sistema usando as configura√ß√µes do cliente j√° licenciado"""
    try:
        btn.config(state='disabled')
        
        # Busca configura√ß√£o baseada no cliente j√° instalado
        cliente_id = info_licenca['cliente_id']
        progresso = [f"üîÑ Atualizando sistema para: {cliente_id}"]
        label.config(fg='blue', text="\n".join(progresso))
        label.update()
        
        try:
            config = baixar_config_por_serial(cliente_id)
        except Exception as e:
            # Se n√£o conseguir baixar config do cliente atual, usa configura√ß√£o padr√£o
            progresso.append("‚ö†Ô∏è Usando configura√ß√£o padr√£o para atualiza√ß√£o")
            config = {
                'CLIENT_ID': cliente_id,
                'INSTALL_DIR': 'C:\\FLMSistemas',
                'FRONTEND_NAME': 'FLMSistemas_automacao.accdr',
                'FRONTEND_URL': 'https://github.com/fsmfile/elevesystem/raw/main/FrontEnd/FLMSistemas_automacao.accdr',
                'SHORTCUT_NAME': 'Eleve System.lnk'
            }
        
        # Caminho do frontend
        frontend_path = Path(info_licenca['caminho_frontend'])
        
        # Remove frontend antigo se existir
        if frontend_path.exists():
            try:
                frontend_path.unlink()
                progresso.append("‚úî Frontend antigo removido")
            except Exception as e:
                progresso.append(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel remover frontend antigo")
        
        # Baixa novo frontend
        label.config(text="\n".join(progresso + ["üì• Baixando atualiza√ß√£o..."]))
        label.update()
        
        download_with_progress(config['FRONTEND_URL'], frontend_path, label, force=True)
        progresso.append("‚úî Sistema atualizado")
        
        # Verifica se precisa criar atalho
        if not verificar_atalho_existe(config.get('SHORTCUT_NAME', 'Eleve System.lnk')):
            progresso.append("üîó Criando atalho...")
            label.config(text="\n".join(progresso))
            label.update()
            
            try:
                criar_atalho(frontend_path, config.get('SHORTCUT_NAME', 'Eleve System.lnk'))
                progresso.append("‚úî Atalho criado")
            except Exception as e:
                progresso.append(f"‚ö†Ô∏è Atalho n√£o criado")
        else:
            progresso.append("‚úî Atalho verificado")
        
        # Configura local confi√°vel (caso n√£o esteja configurado)
        add_trusted_location(frontend_path.parent)
        progresso.append("‚úî Configura√ß√£o finalizada")
        
        label.config(fg='green', text="\n".join(progresso + ["‚úÖ Atualiza√ß√£o conclu√≠da com sucesso!"]))
        
    except Exception as e:
        label.config(fg='red', text=f"‚ùå Erro na atualiza√ß√£o: {e}")
    finally:
        btn.config(state='normal')


def main_gui():
    style = Style("flatly")
    root = style.master
    root.title("Eleve System ‚Äì Instalador")
    root.geometry("550x350")
    if ICON_PATH.exists():
        try: root.iconbitmap(str(ICON_PATH))
        except: pass

    frame = ttk.Frame(root, padding=20)
    frame.pack(fill='both', expand=True)

    # T√≠tulo principal
    titulo = ttk.Label(frame, text="Eleve System", font=('Segoe UI', 18, 'bold'))
    titulo.pack(pady=(0, 5))
    
    # Subt√≠tulo
    subtitulo = ttk.Label(frame, text="Sistema de Gest√£o Empresarial", font=('Segoe UI', 11))
    subtitulo.pack(pady=(0, 30))

    # Verifica se j√° existe instala√ß√£o
    info_licenca = verificar_licenca_existente()
    
    if info_licenca["tem_licenca"]:
        # MODO ATUALIZA√á√ÉO - Sistema j√° instalado com licen√ßa
        status_frame = ttk.LabelFrame(frame, text="Status", padding=15)
        status_frame.pack(fill='x', pady=(0, 20))
        
        ttk.Label(status_frame, text=f"‚úÖ Sistema instalado e licenciado", 
                 font=('Segoe UI', 12), foreground='green').pack()
        ttk.Label(status_frame, text=f"Cliente: {info_licenca['cliente_id']}", 
                 font=('Segoe UI', 10)).pack()

        progresso = tk.Label(frame, text='', font=('Segoe UI', 10))
        progresso.pack(pady=15)

        botao_atualizar = ttk.Button(frame, text='üîÑ Atualizar Sistema', style='success.TButton')
        botao_atualizar.pack(ipady=8, pady=(10, 0))

        def ao_clicar_atualizar():
            atualizar_sistema_sem_serial(progresso, botao_atualizar, info_licenca)

        botao_atualizar.config(command=ao_clicar_atualizar)
        
    else:
        # MODO INSTALA√á√ÉO - Sistema n√£o instalado
        if info_licenca["erro"]:
            status_frame = ttk.LabelFrame(frame, text="Status", padding=15)
            status_frame.pack(fill='x', pady=(0, 20))
            
            ttk.Label(status_frame, text="‚ùå Sistema n√£o encontrado", 
                     font=('Segoe UI', 12), foreground='orange').pack()
            ttk.Label(status_frame, text="Pronto para nova instala√ß√£o", 
                     font=('Segoe UI', 10)).pack()
        
        ttk.Label(frame, text="Digite o SERIAL de instala√ß√£o:", font=('Segoe UI', 12)).pack(pady=(10, 8))
        entrada_id = ttk.Entry(frame, font=('Segoe UI', 13), justify='center')
        entrada_id.pack(ipady=6, ipadx=10)

        progresso = tk.Label(frame, text='', font=('Segoe UI', 10))
        progresso.pack(pady=15)

        botao_instalar = ttk.Button(frame, text='üì¶ Instalar Sistema', style='primary.TButton')
        botao_instalar.pack(ipady=8, pady=(10, 0))

        def ao_clicar_instalar():
            serial = entrada_id.get().strip()
            if not serial:
                messagebox.showerror("Erro", "Informe um SERIAL v√°lido.")
                return
            try:
                # Verifica se o serial j√° foi usado
                progresso.config(fg='blue', text="üîç Verificando serial...")
                progresso.update()
                
                if verificar_serial_usado(serial):
                    progresso.config(fg='red', text=f"‚ùå Este serial j√° foi utilizado!\n\nCada serial pode ser usado apenas uma vez.\nEntre em contato com o suporte para obter um novo serial.")
                    return
                
                # Se o serial n√£o foi usado, continua com a instala√ß√£o
                progresso.config(fg='blue', text="‚úÖ Serial v√°lido! Baixando configura√ß√£o...")
                progresso.update()
                
                config = baixar_config_por_serial(serial)
                instalar(config, progresso, botao_instalar, serial)
            except Exception as e:
                progresso.config(fg='red', text=f"‚ùå {e}")

        botao_instalar.config(command=ao_clicar_instalar)

    # Rodap√© discreto
    rodape_frame = ttk.Frame(frame)
    rodape_frame.pack(side='bottom', fill='x', pady=(30, 0))
    
    ttk.Label(rodape_frame, text="Pressione Ctrl+Shift+C para acessar ferramentas avan√ßadas", 
             font=('Segoe UI', 8), foreground='lightgray').pack()

    def atalho_dev(event):
        senha = simpledialog.askstring("Acesso Desenvolvedor", "Digite a senha:", show="*")
        if senha == "4865753":
            abrir_modo_dev(root)

    root.bind_all("<Control-Shift-c>", atalho_dev)
    root.bind_all("<Control-Shift-C>", atalho_dev)
    root.mainloop()

if __name__ == '__main__':
    main_gui()
